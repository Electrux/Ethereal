ldmod std.math;

struct _math_t {
	# euler's number
	e =  math_calc_e();
	pi = math_calc_pi();
	# max times to iterate for precisely calculating a function's result
	precision_iter_max = get_flt_precision() * 2;
	# decimal representation for precision
	precision = get_flt_precision_num();
}

math = _math_t{};

mfn< _math_t > get_prec() { return get_flt_precision(); }

mfn< _math_t > update_prec( p ) {
	set_flt_precision( p );
	self = _math_t{ math_calc_e(), math_calc_pi(), get_flt_precision() * 2, get_flt_precision_num() };
}

mfn< _math_t > to_rad( x ) { return x * self.pi / 180.0; }
mfn< _math_t > to_deg( x ) { return x * 180.0 / self.pi; }

# sin and cos are implemented in C++ module
mfn< _math_t > tan( x ) { return self.sin( x ) / self.cos( x ); }

mfn< _math_t > csc( x ) { return 1 / self.sin( x ); }
mfn< _math_t > sec( x ) { return 1 / self.cos( x ); }
mfn< _math_t > cot( x ) { return 1 / self.tan( x ); }