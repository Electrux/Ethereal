fn read_flag_file( file, v ) {
	f = fopen( file, 'r' );
	if f.is_open() {
		f.read_all( v );
	}
}

fn write_flag_file( file, v ) {
	f = fopen( file, 'a' );
	if f.is_open() {
		sz = v.len();
		for x = 0; x < sz; x += 1 {
			f.write( v[ x ] + '\n' );
		}
	}
}

fn check_compiler_flag( flag ) {
	if flag.len() > 1 && flag[ 1 ] == 'D' { return true; }
	cmd = "g++ -fsyntax-only " + flag + " -xc++ /dev/null 2>/dev/null";
	res = os.exec( cmd ) == 0;
	return res;
}

mfn< _cxx_proj_t > add_flags( flags ) {
	avail_flags = [];
	not_avail_flags = [];
	read_flag_file( 'flag_cache', avail_flags );
	sz = flags.len();
	for i = 0; i < sz; i += 1 {
		cprint( '{y}checking if compiler supports {c}', flags[ i ], ' {0}... ' );
		if avail_flags.find( flags[ i ] ) >= 0 {
			self.flags.push( flags[ i ] );
			cprintln( '{g}yes (cached){0}' );
		} elif check_compiler_flag( flags[ i ] ) {
			self.flags.push( flags[ i ] );
			not_avail_flags.push( flags[ i ] );
			cprintln( '{g}yes{0}' );
		} else {
			cprintln( '{r}no{0}' );
		}
	}
	write_flag_file( 'flag_cache', not_avail_flags );
}
