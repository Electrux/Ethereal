#!./build/bin/et

import std.opt;

struct btree {
	data = 0;
	lhs = opt_new();
	rhs = opt_new();
}

fn create_tree( d ) {
	return btree{ d };
}

mfn< btree > add_node( data ) {
	if data <= self.data {
		if self.lhs.empty() {
			self.lhs.set( create_tree( data ) );
		} else {
			self.lhs.get().add_node( data );
		}
	} else {
		if self.rhs.empty() {
			self.rhs.set( create_tree( data ) );
		} else {
			self.rhs.get().add_node( data );
		}
	}
}

fn show( tree ) {
	if !tree.lhs.empty() {
		show( tree.lhs.get() );
	}
	println( tree.data );
	if !tree.rhs.empty() {
		show( tree.rhs.get() );
	}
}

tree = create_tree( 4 );
tree.add_node( 2 );
tree.add_node( 1 );
tree.add_node( 3 );
tree.add_node( 6 );
tree.add_node( 5 );
tree.add_node( 7 );

show( tree );