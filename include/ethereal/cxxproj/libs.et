import std.map;

mfn< _cxx_proj_t, _cxx_build_t > add_lib_dirs( dirs ) {
	sz = dirs.len();
	for i = 0; i < sz; i += 1 {
		self.lib_dirs.push( dirs[ i ] );
	}
}

mfn< _cxx_proj_t, _cxx_build_t > use_lib( lib ) {
	cprint( '{y}checking support for library {c}', lib, ' {0}... ' );
	flush_out();
	file = __DIR__ + '/tests/' + lib + '.cfg';

	if !fs.exists( file ) {
		file = __DIR__ + '/tests/' + lib + '_cpp.cfg';
		if !fs.exists( file ) {
			cprintln( '{r}no (library does not exist){0}' );
			println( file );
			return false;
		}
	}

	f = fopen( file, 'r' );
	line = "";
	map = {};
	for ; f.read( line ); {
		splt = line.split( '=' );
		map.insert( splt[ 0 ].trim(), splt[ 1 ].trim() );
	}
	if !map.find( 'file' ) {
		println( 'could not find \'file\' declaration in library config: ', file );
		exit( 1 );
	}

	src = __DIR__ + '/tests/' + map[ 'file' ];
	inc_dirs = "";
	lib_dirs = "";
	lib_flags = "";

	comp_str = os.get_env( 'CC' ) + ' ';
	if map.find( 'lang' ) {
		lang = map[ 'lang' ];
		if lang == 'c' {
			if os.get_env( 'CC' ) == 'clang++' {
				comp_str = 'clang ';
			} else {
				comp_str = 'gcc ';
			}
		}
	}

	if map.find( 'inc_dirs' ) {
		inc_dirs = map[ 'inc_dirs' ];
	}
	if map.find( 'lib_dirs' ) {
		lib_dirs = map[ 'lib_dirs' ];
	}
	if map.find( 'lib_flags' ) {
		lib_flags = map[ 'lib_flags' ];
	}
	comp_str += src + ' ' + inc_dirs + ' ' + lib_dirs + ' ' + lib_flags + ' -o /dev/null 2>/dev/null';

	if os.exec( comp_str ) != 0 {
		cprintln( '{r}no{0}' );
		return false;
	}
	if !inc_dirs.empty() { self.inc_dirs.push( inc_dirs ); }
	if !lib_dirs.empty() { self.lib_dirs.push( lib_dirs ); }
	if !lib_flags.empty() { self.lib_flags.push( lib_flags ); }
	cprintln( '{g}yes{0}' );
	return true;
}
