# TODO: add helper functions for working with __ini__, implement ini_write
import std.str;
import std.vec;
import std.map;
import std.fs;

fn ini_read( fname ) {
	__f__ = fopen( fname, 'r' );
	if !__f__.is_open() { return INIRet.FNOP; }
	__ini__ = {};
	__curr_blk__ = '';
	__ini__.insert( '', {} );
	__line__ = '';
	for ; __f__.read( __line__ ); {
		__line__.trim();
		if __line__.empty() { continue; }
		# comments
		if __line__.front() == ';' { continue; }
		# make block
		if __line__.front() == '[' && __line__.back() == ']' {
			#__line__.erase_at( 0 );
			#__line__.erase_at( __line__.len() - 1 );
			__line__.pop_front();
			__line__.pop_back();
			__curr_blk__ = __line__;
			__ini__.insert( __curr_blk__, {} );
			continue;
		}
		if !__line__.find( '=' ) { continue; }
		# make key value pairs
		__kvp__ = __line__.split_first( '=' );
		__kvp__[ 0 ].trim();
		key = __kvp__[ 0 ];
		val = '';
		if __kvp__.len() > 1 {
			val = __kvp__[ 1 ].trim();
		}
		__ini__[ __curr_blk__ ].insert( key, val );
	}
	if __ini__[ '' ].len() == 0 {
		__ini__.delete( '' );
	}
	return __ini__;
}