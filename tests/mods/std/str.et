#!/usr/bin/env et

import std.vec;
import std.str;

s1 = 'str1';
s2 = ' str2 ';

assert_eq( s1 + s2,  'str1 str2 ' );
assert_eq( s1 += s2, 'str1 str2 ' );
assert_eq( '5' * 5, '55555' );
assert_eq( 5 * '5', '55555' );

assert_eq( 'str1', 'str1' );
assert_ne( 'str1', 'str2' );
assert_lt( 'str',  'str1' );
assert_le( 'str1', 'str1' );
assert_gt( 'str1',  'str' );
assert_ge( 'str1', 'str1' );

s1 = 'str1';

assert_eq( s1.at( 1 ), 't' );
assert_eq( s1[ 5 ],    nil );
assert_eq( s1.hash(),   s1 );

assert_eq( s1.len(), 4 );

assert_nt( s1.empty() );
s1.clear();
assert( s1.empty() );

s1 = '52';

assert( s1.is_int() );
assert_eq( s1.to_int(), 52 );
assert_eq( s1.set_at( 1, '5' ), '55' );

assert_eq( ''.erase_at( 1 ), '' );
assert_eq( 'NASA'.erase_at( 1 ),  'NSA' );
assert_eq( 'NASA'.erase_at( 4 ), 'NASA' );

assert_nt( ''.find( 'a' ) );
assert( 'abc'.find( 'a' ) );
assert_nt( 'abc'.find( '' ) );

assert_eq( ''.front(), '' );
assert_eq( 'ab'.front(), 'a' );
assert_eq( ''.back(),  '' );
assert_eq( 'ab'.back(),  'b' );

assert_eq( ''.pop_front(), '' );
assert_eq( 'ab'.pop_front(), 'b' );
assert_eq( ''.pop_back(),  '' );
assert_eq( 'ab'.pop_back(),  'a' );

assert_eq( ''.substr( 0, 2 ), '' );
assert_eq( 'ab'.substr( 0, 1 ), 'a' );
assert_eq( 'abc'.substr( 1, 2 ), 'bc' );

assert_eq( 'a,b'.split( ',' ), [ 'a', 'b' ] );
assert_eq( 'a,b,c'.split_first( ',' ), [ 'a', 'b,c' ] );

assert_eq( s2.trim(), 'str2' );
