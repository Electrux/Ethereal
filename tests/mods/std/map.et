#!./buildfiles/et

import std.str;
import std.map;

m = { 'k', 'v' };

assert( m[ 'k' ] == 'v', 'key \'k\' in map \'m\' should have been \'v\'' );
assert( m[ 'l' ] == nil, 'key \'l\' in map \'m\' should have been nil' );

assert( m.delete( 'v' ) == false, 'shouldn\'t be able to delete key: v' );
assert( m.delete( 'k' ), 'shouldn\'t be able to delete key: v' );
assert( m.len() == 0, 'len should be 0, but is: ', m.len() );

m.insert( 'k', 'v' ).insert( 'l', 'w' );
m.clear();

assert( m.len() == 0, 'len should be 0 post clear, but is: ', m.len() );

m.insert( 'k', 'v' );

assert( m.find( 'k' ) == true, 'key k should have existed in map' );

n = { 'l', 'm' };
m = n;
m[ 'l' ] = 'b';
assert( n[ 'l' ] == 'm', 'key \'l\' in map \'n\' should have been \'m\'' );

# nested map
nm = {
	'solar system', {
		'first', 'mercury',
		'second', 'venus'
	}
};

assert( nm[ 'solar system' ][ 'second' ] == 'venus', 'nm[ \'solar system\' ][ \'second\' ] should have been \'venus\'' );

for nm_n in nm.iter() {
	for nm_m in nm_n.1.iter() {
		println( nm_m );
	}
}