#!/usr/bin/env et

import std.math;

assert_lt( math.e  - 2.7182818284590452353602874713526624977572470936999, math.precision );
assert_lt( math.pi - 3.1415926535897932384626433832795028841971693993751, math.precision );

assert_eq( math.abs( -131 ), 131 );
assert_eq( math.abs(  131 ), 131 );

assert_eq( math.abs( -131.25 ), 131.25 );
assert_eq( math.abs(  131.25 ), 131.25 );

assert( math.sqrt( -25.0 ).is_nan() );
assert_eq( math.sqrt( 25.0 ), 5.0 );
assert_lt( math.sqrt(  5.0 ) - 2.236067977499789805051477742381393909454345703125, math.precision );

assert_eq( math.log( 1.0 ), 0.0 );
assert( math.log( 1.0, 1.0 ).is_nan() );
assert( math.log( 0.0, 2.0 ).is_nan() );
assert_eq( math.log( 1.0, 2.0 ), 0.0 );
assert_eq( math.log( 10.0, 10.0 ), 1.0 );
assert_lt( 3 - math.log( 1000.0, 10.0 ), math.precision );
assert( math.log( -1.0 ).is_nan() );
assert( math.log( 10.0, -1.0 ).is_nan() );

assert_eq( math.ceil(  0.0 ),  0 );
assert_eq( math.ceil(  1.0 ),  1 );
assert_eq( math.ceil( 1.01 ),  2 );
assert_eq( math.ceil(  1.5 ),  2 );
assert_eq( math.ceil( -1.5 ), -1 );

assert_eq( math.floor( 0.0 ), 0 );
assert_eq( math.floor( 1.0 ), 1 );
assert_eq( math.floor( 1.01 ), 1 );
assert_eq( math.floor( 1.5 ), 1 );
assert_eq( math.floor( -1.5 ), -2 );

assert_le( math.sin( 1.0 ) - 0.84147098480789650665, math.precision );
assert_le( math.cos( 1.0 ) - 0.54030230586813971740, math.precision );
assert_le( math.tan( 1.0 ) - 1.55740772465490223050, math.precision );
assert_le( math.csc( 1.0 ) - 1.18839510577812121626, math.precision );
assert_le( math.sec( 1.0 ) - 1.85081571768092561791, math.precision );
assert_le( math.cot( 1.0 ) - 0.64209261593433070301, math.precision );

assert_le( math.asin( 1.0 ) - 1.57079632679489661923, math.precision );
assert_le( math.acos( 1.0 ) - 0.00000000000000000000, math.precision );
assert_le( math.acos( 0.0 ) - 1.57079632679489661923, math.precision );
assert_le( math.atan( 1.0 ) - 0.78539816339744830961, math.precision );
assert_eq( math.acsc( 1.0 ), math.asin( 1.0 ) ); # acsc(x) => asin(1/x)
assert_le( math.asec( 1.0 ) - 0.63661977236758134307, math.precision ); # # asec(x) => 1/acos(x)
assert_le( math.acot( 1.0 ) - 1.27323954473516268615, math.precision );

math.update_prec( 350 );
assert_eq( math.get_prec(), 350 );
