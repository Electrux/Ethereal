fn read_flag_file( file, v ) {
	__f__ = fopen( file, 'r' );
	if __f__.is_open() {
		__f__.read_all( v );
	}
}

fn append_flag_file( file, v ) {
	__f__ = fopen( file, 'a' );
	if __f__.is_open() {
		for __e__ in v.iter() {
			__f__.write( __e__ + '\n' );
		}
	}
}

fn check_compiler_flag( flag ) {
	if flag.len() > 1 && flag[ 1 ] == 'D' { return true; }
	__cmd__ = "g++ -fsyntax-only " + flag + " -xc++ /dev/null 2>/dev/null";
	__res__ = os.exec( __cmd__ ) == 0;
	return __res__;
}

mfn< _cxx_proj_t, _cxx_build_t > add_flags( flags ) {
	__avail_flags__ = [];
	__not_avail_flags__ = [];
	read_flag_file( 'flag_cache', __avail_flags__ );
	for __flag__ in flags.iter() {
		cprint( '{y}checking if compiler supports {c}', __flag__, ' {0}... ' );
		flush_out();
		if __avail_flags__.find( __flag__ ) >= 0 {
			self.flags.push( __flag__ );
			cprintln( '{g}yes (cached){0}' );
		} elif check_compiler_flag( __flag__ ) {
			self.flags.push( __flag__ );
			__not_avail_flags__.push( __flag__ );
			cprintln( '{g}yes{0}' );
		} else {
			cprintln( '{r}no{0}' );
		}
	}
	append_flag_file( 'flag_cache', __not_avail_flags__ );
}
